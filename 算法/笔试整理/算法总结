图论

最小生成树：prim cruskal
AOV网：节点表示活动，边表示活动的优先关系。
    ----》拓扑排序：有向图G中的顶点排成一个序列，若存在vi-》vj，则vi必在vj之前
任意两点间的最短路径：floyd
指定两点间的最短路径：迪杰克斯拉？？？

动态规划

高楼抛鸡蛋（共N层楼，k个鸡蛋，最坏情况下需要抛几次，能够找到鸡蛋不碎的最高楼层）
dp[i,j]  i表示剩余鸡蛋数，即表示剩余的楼层数
若i=1，dp[i,j]=j
若j=0, dp[i,j]=0
若鸡蛋碎了，dp[i,j]=dp[i-1,j-1]
若鸡蛋没碎，dp[i,j]=dp[i,N-j]

最长公共子序列和长度（有两个序列L1,L2）
令L1、L2的角标从1开始,长度分别为m,n
dp[i,j]  表示L1[1:i+1]和L2[1:j+1]最长公共子序列长度
b[i,j]  为0，表示L1[i]=L2[j]
        为1，表示dp[i-1,j]>dp[i,j-1]
        为2，表示dp[i-1,j]<dp[i,j-1]
若i=0或j=0,dp[i,j]=0
若L1[i]=L2[j],dp[i,j]=dp[i-1,j-1],b[i][j]=1
若dp[i-1,j]>dp[i,j-1],dp[i,j]=dp[i-1,j]+1,b[i][j]=2
若dp[i-1,j]<dp[i,j-1],dp[i,j]=dp[i,j-1]+1,b[i][j]=3
利用b[i,j]构造最长公共子序列，
从L1、L2尾部开始，若b[i,j]=1,保存L1[i],去判断b[i-1,j-1]
若b[i,j]=2,去判断b[i-1,j]
若b[i,j]=2,去判断b[i,j-1]
直到i=0或j=0为止

最长递增子序列
dp[j] 以d[j]结尾的最长递增子序列
dp[j] = max(dp[k]+1), 1<=k<j并且d[k]<d[j]

最大子段和
dp[j]=max(d[k]+...+d[j]),其中1<=k<=j
dp[j] = max(dp[j-1]+d[j],d[j])
return max(dp)

0-1背包
dp[i,j] 背i物品，背包容量为j，背包中的最大价值
若j>=wi,dp[i,j] = max(dp[i-1,j],dp[i-1][j-wi]+vi)
若0<=j<wi,dp[i,j] = dp[i-1,j]
若i=0,dp[i,j]=0

判断能否把一个只包含正整数数组a平分成两部分。
V = sum(a)//2  #若sum(a)为奇数，return False
dp[i][j] i个数字中挑选数字和为j,dp[i][j] true/false
dp[i][j] = dp[i-1][j] or a[i]==j or (a[i]<j and dp[i-1][j-a[i]])

平分一个只包含正整数的数组a，若不能平分，就将不能平分的部分扔掉，求扔掉的价值的最小值
dp[i][j] i代表第i个物品，j代表两部分价值的差值，dp[i][j]代表可分的最大sum
dp = m*sum(a) 零矩阵
dp[0][0] = 0 dp[0][a[0]]=a[0]
扔掉第i个物品:dp[i-1][j]
把第i个物品分到多的一方，差值会增加:dp[i-1][j+a[i]]+a[i]
把第i个物品分到少的一方，差值会减小:dp[i-1][abs(j-a[i])]+a[i]
dp[i][j] = max(dp[i-1][j],dp[i-1][j+a[i]]+a[i],dp[i-1][abs(j-a[i])]+a[i])
扔掉的部分为：sum(a)-dp[n-1][0]

对于数组a,长度为n,a[i]表示从位置i可以一次向左或向右跳1~a[i]步，求从位置0出发跳到位置n-1,最少跳跃次数k?
dp[i]表示从位置i跳到位置n-1的最少跳跃次数
dp[n-1]=0
for i in range(n-2,-1,-1):
    t = i+a[i]
    if t>=n-1:dp[i]=1
    else:dp[i]=dp[t]+1
    for j in range(i+1,n):
        if dp[j]<dp[i]+1:break
        dp[j]=dp[i]+1
dp[0]为所求















